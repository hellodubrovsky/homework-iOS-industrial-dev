//
//  LogInInspector.swift
//  Navigation
//
//  Created by –ò–ª—å—è on 18.07.2022.
//

import Foundation

final class LogInInspector: AuthorizationCheckerDelegate {
    
    let databaseService = RealmService()
    let userDefaults = UserDefaults.standard
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    func checkCredentials(login: String, password: String, completion: @escaping (Result<AuthorizationModel, Error>) -> Void) {
        Checker.shared.checkCredentials(login: login, password: password) { result, error in
            if let error = error {
                completion(.failure(error))
            } else {
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç—Å—è –ª–∏ –≤ UserDefaults —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
                if self.userDefaults.string(forKey: "UID") == nil {
                    let userDatabase = AuthorizationModel(login: login, password: password, uid: (result?.user.uid)!, authorizationStatus: true)
                    self.saveUserInDatabase(userDatabase)
                }
                
                let user = AuthorizationModel(login: (result?.user.email)!, uid: (result?.user.uid)!)
                completion(.success(user))
            }
        }
    }
    
    /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    func signUp(login: String, password: String, completion: @escaping (Result<AuthorizationModel, Error>) -> Void) {
        Checker.shared.signUp(login: login, password: password) { result, error in
            if let error = error {
                completion(.failure(error))
            } else {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                let userDatabase = AuthorizationModel(login: login, password: password, uid: (result?.user.uid)!, authorizationStatus: true)
                self.saveUserInDatabase(userDatabase)
                
                let user = AuthorizationModel(login: (result?.user.email)!, uid: (result?.user.uid)!)
                completion(.success(user))
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    func checkingStatusOfAutomaticAuthorization(completion: @escaping (Result<AuthorizationModelRealm, AuthorizationErrors>) -> Void) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç—Å—è –ª–∏ –≤ UserDefaults —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
        guard self.userDefaults.bool(forKey: "statusAutomaticAuthorization") else {
            completion(.failure(.automaticAuthorizationStatusNotFound))
            return
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç—Å—è –ª–∏ –≤ UserDefaults —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        guard let userUID = self.userDefaults.string(forKey: "UID") else {
            completion(.failure(.savedUserIsMissing))
            print("\nü§ñ The user was not found in the database.")
            return
        }
        let predicate = NSPredicate(format: "uid == %@", userUID)
        self.databaseService.fetch(AuthorizationModelRealm.self, predicate: predicate) { result in
            switch result {
            case .success(let user):
                print("\nü§ñ The user was found in the database:\n\(user)")
                completion(.success(user))
            case .failure(let error):
                print(error.localizedDescription)
                print("\nü§ñ The user was not found in the database.")
            }
        }
    }
    
    /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    func saveUserInDatabase(_ user: AuthorizationModel) {
        self.databaseService.create(AuthorizationModelRealm.self, keyedValue: user.keyedValues) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let user):
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤ UserDefaults.
                self.userDefaults.setValuesForKeys(["statusAutomaticAuthorization": true, "UID": user.uid])
                print("\nü§ñ A new user has been added to the database:\n\(user)")
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }
}
